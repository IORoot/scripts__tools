#!/usr/bin/env bash

# System Message Of The Day
# (SMOTD)

version=0.1

# Parts of this has been taken from neofetch. https://github.com/dylanaraps/neofetch
# This is a customised motd with less built-in than neofetch

# ┌──────────────────────────────────────┐ 
# │                                      │░
# │           SOURCE CONSTANTS           │░
# │                                      │░
# └──────────────────────────────────────┘░
#  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
. ./constants/colours
. ./constants/bar

# ┌──────────────────────────────────────┐ 
# │                                      │░
# │           PLUGINS TO RUN             │░
# │                                      │░
# └──────────────────────────────────────┘░
#  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
plugins()
{

    PLUGINS=(

        # Essentially Ordered Plugins.
        "kernel"        # KERNAL MUST BE FIRST PLUGIN. (OS Relies on it)
        "os"            # OS MUST BE THE SECOND PLUGIN. (Others rely on it)

        # All other Plugins
        "hostname"
        "local_ip"
        "public_ip"
        "uptime"
        "cpu_usage"
        "memory"
        "disk"
        "model"
        "systemctl:mysql"   
        "systemctl:php"   
        "systemctl:apache"   
        "systemctl:ssh"   
    )


    # ┌──────────────────────────────────────┐ 
    # │        Source & Run Plugins          │
    # └──────────────────────────────────────┘
    for plugin in "${PLUGINS[@]}"; do

        IFS=: read plugin_name plugin_parameter <<< $plugin

        filename="get_${plugin_name}"               # Filename
        . ./plugins/$filename                       # Source File
        $filename $plugin_parameter 2> /dev/null   # Run, hide errors
    done

}
plugins


# ┌──────────────────────────────────────┐ 
# │                                      │░
# │              VARIABLES               │░
# │                                      │░
# └──────────────────────────────────────┘░
#  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
WIDTH=$(tput cols)






# MacOS
macos(){

    HDD=$(df -H | sort | head -1 | awk '{print $2 "/"  $3}')

}


ubuntu(){
    # PUBLIC_IP=$(curl -sS ifconfig.me)


    HDD=$(df -H | sort | head -1 | awk '{print $2 "/"  $3}')

    # PHP
    PHP_VER=$(php -v | head -1 | cut -c 5-10)
    PHP_SHORT_VER=$(php -v | head -1 | cut -c 5-7)
    PHP_STATE=$(systemctl status php$PHP_SHORT_VER-fpm.service | grep "Active" | awk '{print $2}')

    # MYSQL
    MYSQL_STATE=$(systemctl status mysql.service | grep "Active" | awk '{print $2}')
    MYSQL_VER=$(mysql --version | awk '{print $3}')

    # APACHE
    APACHE_STATE=$(systemctl status apache2.service | grep "Active" | awk '{print $2}')
    APACHE_VER=$(apache2 -v | head -1 | awk '{print $3}' )

    # PUPPET
    PUPPET_VER=$(puppet --version)
    PUPPET_RAN=$(head -n3 /opt/puppetlabs/puppet/cache/state/last_run_report.yaml 2> /dev/null | grep "time" | awk -F "'" '{print $2}' | cut -c 1-16)
}



# Make the line 80chars long, no matter the title length.
title(){

    TITLE=$1
    COUNT=${#TITLE}
    let "LENGTH = (80-$COUNT)/2"
    for ((i=1; i<=$LENGTH; i++)); do
        printf "${I_Black}-"
    done

    printf "${Red} $TITLE "

    for ((i=1; i<=$LENGTH; i++)); do
        printf "${I_Black}-"
    done
    
    printf "\n"
}



# LOGO

output_node()
{
    # NODE
    title "${NODE_NAME}"
    printf "${I_Black}HOST: ${Cyan}%-40s ${I_Black} UP  : ${Cyan}%-40s\n" "${HOSTNAME}"       "${UPTIME}"
    printf "${I_Black}OS  : ${Cyan}%-40s ${I_Black} CPU : ${Cyan}%-40s\n" "${OS}"             "${CPU_USAGE}"
    printf "${I_Black}PUB : ${Cyan}%-40s ${I_Black} HDD : ${Cyan}%-40s\n" "${LOCAL_IP}"       "${DISK}"
    printf "${I_Black}PRI : ${Cyan}%-40s ${I_Black} MEM : ${Cyan}%-40s\n" "${PUBLIC_IP}"      "${MEMORY}"
    printf "${I_Black}CPU : ${Cyan}%-54s ${I_Black} MOD : ${Cyan}%-40s\n" "${CPU_USAGE}"       "${MODEL}"
}

output_services()
{
    # SERVICES
    title "Services"
    printf "${I_Black}PHP : ${Cyan}%-40s ${I_Black} STATE :${Green} %-40s\n" "${MYSQL}"    "${PHP_STATE}"
    # printf "${I_Black}MSQL: ${Cyan}%-40s ${I_Black} STATE :${Green} %-40s\n" "${MYSQL_VER}"  "${MYSQL_STATE}" 
    # printf "${I_Black}WEB : ${Cyan}%-40s ${I_Black} STATE :${Green} %-40s\n" "${APACHE_VER}" "${APACHE_STATE}"
    # printf "${I_Black}PUPP: ${Cyan}%-40s ${I_Black} RAN   :${Green} %-40s\n" "${PUPPET_VER}" "${PUPPET_RAN}"
}

helpme(){
    title "Help"
    printf "${I_Black}HELP: ${Orange}'help' will list custom scripts. 'cheat' for command cheatsheet.\n"
}


macos;
output_node;
output_services;
# helpme;
# title "◣◥";