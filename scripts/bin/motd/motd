#!/usr/bin/env bash

# Message Of The Day
# (MOTD)

version=0.1

# The REAL location of this file.
file_location()
{
    SOURCE="${BASH_SOURCE[0]:-$0}";
    while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname -- "$SOURCE"; )" &> /dev/null && pwd 2> /dev/null; )";
    SOURCE="$( readlink -- "$SOURCE"; )";
    [[ $SOURCE != /* ]] && SOURCE="${DIR}/${SOURCE}"; # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    SCRIPT_DIR="$( cd -P "$( dirname -- "$SOURCE"; )" &> /dev/null && pwd 2> /dev/null; )";
}
file_location



# Parts of this has been taken from neofetch. https://github.com/dylanaraps/neofetch
# This is a customised motd with less built-in than neofetch
# ┌──────────────────────────────────────┐ 
# │                                      │░
# │            SOURCE CONFIG             │░
# │                                      │░
# └──────────────────────────────────────┘░
#  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
source ${SCRIPT_DIR}/logo.conf

# ┌──────────────────────────────────────┐ 
# │                                      │░
# │           SOURCE COMPONENTS          │░
# │                                      │░
# └──────────────────────────────────────┘░
#  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
source ${SCRIPT_DIR}/components/colours
source ${SCRIPT_DIR}/components/bar
source ${SCRIPT_DIR}/components/row
source ${SCRIPT_DIR}/components/columns
source ${SCRIPT_DIR}/components/title

# ┌──────────────────────────────────────┐ 
# │                                      │░
# │           PLUGINS TO RUN             │░
# │                                      │░
# └──────────────────────────────────────┘░
#  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
plugins()
{

    PLUGINS=(

        # Essentially Ordered Plugins.
        "kernel"        # KERNAL MUST BE FIRST PLUGIN. (OS Relies on it)
        "os"            # OS MUST BE THE SECOND PLUGIN. (Others rely on it)

        # All other Plugins
        "hostname"
        "local_ip"
        "public_ip"
        "uptime"
        "cpu_usage"
        "memory"
        "disk"
        "model"
        "systemctl:mysql"   
        "systemctl:php"   
        "systemctl:apache"   
        "systemctl:ssh"   
        "puppet"
        "logo"
    )


    # ┌──────────────────────────────────────┐ 
    # │        Source & Run Plugins          │
    # └──────────────────────────────────────┘
    for plugin in "${PLUGINS[@]}"; do

        IFS=: read plugin_name plugin_parameter <<< $plugin

        filename="get_${plugin_name}"               # Filename
        . ${SCRIPT_DIR}/plugins/$filename                       # Source File
        $filename $plugin_parameter 2> /dev/null   # Run, hide errors
    done

}
plugins


COLUMN1_WIDTH=16
COLUMN1="${LOGO}"


COLUMN2_WIDTH=50
add_line_to_column2 $HOSTNAME
add_row_to_column2 HOST         "🙎 ${HOSTNAME} (${OS})"
add_row_to_column2 IP           "🏠 $LOCAL_IP ☁️  $PUBLIC_IP"

DAEMON=$(ps -p 1 -o comm=)
if [ "$DAEMON" == "systemd" ]; then
    add_line_to_column2 SERVICES
    add_row_to_column2 APACHE       $APACHE
    add_row_to_column2 PHP          $PHP
    add_row_to_column2 MYSQL        $MYSQL
    add_row_to_column2 SSH          $SSH
fi 

add_line_to_column2 NODE
add_row_to_column2 CPU          $CPU_USAGE
add_row_to_column2 MEMORY       $MEMORY
add_row_to_column2 DISK         $DISK

add_line_to_column2 "HELP COMMANDS"
add_row_to_column2 "n" "List custom scripts and commands"

add_line_to_column2 "◣◥"

columns;